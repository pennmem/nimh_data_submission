import pandas as pd
import datetime as dt
from dateutil.relativedelta import relativedelta


def get_extra_info(info, extra_info_path):
    """
    Reads head circumference, cap size, birth date, and unique subject identifier (GUID) from a tab-separated text file.
    Calculates age in months as a function of birth date and session date, then adds these additional subject info
    fields to each session. The extra info file is expected to contain one row for each unique subject run in the
    desired time frame, with the following five columns (no headers):
    1) The participant's ID number
    2) The participant's date of birth (MM/DD/YYYY)
    3) The participant's head circumference (in cm)
    4) The participant's cap size (AM, AML, or AL for adult medium, medium/large, and large, respectively)
    5) The participant's (pseudo-)GUID, generated by the app available at https://data-archive.nimh.nih.gov/guid/

    :param info: Data frame containing one row for each session.
    :param extra_info_path: Path to file containing extra subject information.
    :return: Original data frame with additional info added to each row.
    """
    # Read in extra info and organize into a dictionary
    data = {}
    with open(extra_info_path, 'r') as f:
        text = f.readlines()
        text = [line.replace('\n', '').split('\t') for line in text]
    # Create dictionary mapping participant ID to date of birth, head circumference, and cap size
    for line in text:
        dob = line[1].split('/')
        data[line[0]] = dict(
            year=int(dob[2]),
            month=int(dob[0]),
            day=int(dob[1]),
            head_circum=float(line[2]),
            cap_size=line[3],
            guid=line[4]
        )

    # Add extra info to data frame
    info['head_circum'] = pd.Series(None, index=info.index)
    info['cap_size'] = pd.Series(None, index=info.index)
    info['age_in_months'] = pd.Series(None, index=info.index)
    info['subjectkey'] = pd.Series(None, index=info.index)
    for i, sess_data in info.iterrows():
        subj = sess_data.subject
        d = data[subj]
        info.loc[i, 'age_in_months'] = calculate_age_in_months(sess_data, d['year'], d['month'], d['day'])
        info.loc[i, 'head_circum'] = data[subj]['head_circum']
        info.loc[i, 'cap_size'] = data[subj]['cap_size']
        info.loc[i, 'subjectkey'] = data[subj]['guid']

    return info


def calculate_age_in_months(sess_data, year, month=1, day=1):
    """
    Given session information and a date of birth, calculate the participant's age in months at the time of the session.

    :param sess_data: A dictionary or data frame containing the year, month, and day of a session.
    :param year: An integer indicating the year the participant was born.
    :param month: An integer or 3-letter string indicating the month the participant was born (Default=1).
    :param day: An integer indicating the day the participant was born (Default=1).
    :return: The age of the participant (in months) at the time of the session.
    """
    date_of_birth = dt.date(year, month, day)
    date_of_sess = dt.date(sess_data['year'], sess_data['month'], sess_data['day'])
    age = relativedelta(date_of_sess, date_of_birth)
    age = age.years * 12 + age.months + int(round(age.days/31.))  # Convert age to months

    return age
